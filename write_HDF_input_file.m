function write_HDF_input_file( instrument, tg, fields, version, RD )
% write_HDF_infut_file Write input file for NDACC HDF files
%
%   Generates input file needed for MAT2HDF_In function
%   Most of the input is fixed in the original file, only parameters
%   related to the data creator, the instrument, measurement times and the
%   filename are set here
%   Input: 
%       instrument: 1 or 2, for UT-GBS and PEARL-GBS, respectively
%       tg: 'O3' or 'NO2'; tracegas to generate HDF file for
%       fields: structure with info that needs to change in the input file
%        .start: start date (string)
%        .stop: stop date (string)
%        .fname: name of HDF file to be generated (string)
%        .fdir: location of HDF file to be generated (string)
%        .size_rec: length of record to be written to file (number of measurements)
%        .size_grid: number of altitude bins
%       version: string of data file version, 3 digits (e.g. '002')
%       RD: if true, RD flag is set in HDF files
%   Output:
%       input file for each HDF file (named 'input_<fields.fname>')
%
%   CHANGE DATA_FILE_VERSION in templates if resubmitting!!!


% % instrument=1;
% % tg='O3';
% % fields.start='now';
% % fields.stop='soon';
% % fields.fname='blah';
% % fields.size_rec=876;
% % fields.size_grid=60;


%% read example file

% open template
if ismac
    error('Get template')
elseif isunix
    fid = fopen(['/home/kristof/work/NDACC/HDF4_data_submission/input_files/Input_template_GBS_ZENITH_' tg '.txt'],'r');
end

i = 1;
tline = fgetl(fid);
infile{i} = tline;
while ischar(tline)
    i = i+1;
    tline = fgetl(fid);
    infile{i} = tline;
end
fclose(fid);

%% modify fields containing info about file

% PI: fixed in example file

% person creating/submitting the file:
ind = find_in_file(infile,'DO_NAME');

if ismac
    infile(ind:ind+8)=...
        {'DO_NAME=Alwarda;Ramina',...
        'DO_AFFILIATION=University of Toronto;UTORONTO',...
        'DO_ADDRESS=60 St. George Street;M5S1A7 Toronto;CANADA',...
        'DO_EMAIL=ramina.alwarda@mail.utoronto.ca',...
        '!',...
        'DS_NAME=Strong;Kimberly',...
        'DS_AFFILIATION=University of Toronto;UTORONTO',...
        'DS_ADDRESS=60 St. George Street;M5S1A7 Toronto;CANADA',...
        'DS_EMAIL=strong@atmosp.physics.utoronto.ca'};
    
elseif isunix
    infile(ind:ind+8)=...
        {'DO_NAME=Bognar;Kristof',...
        'DO_AFFILIATION=University of Toronto;UTORONTO',...
        'DO_ADDRESS=60 St. George Street;M5S1A7 Toronto;CANADA',...
        'DO_EMAIL=kbognar@atmosp.physics.utoronto.ca',...
        '!',...
        'DS_NAME=Strong;Kimberly',...
        'DS_AFFILIATION=University of Toronto;UTORONTO',...
        'DS_ADDRESS=60 St. George Street;M5S1A7 Toronto;CANADA',...
        'DS_EMAIL=strong@atmosp.physics.utoronto.ca'};
end

% data file version
ind = find_in_file(infile,'DATA_FILE_VERSION');
infile{ind}=['DATA_FILE_VERSION=' version];

% data source: UT-GBS or PEARL-GBS
ind = find_in_file(infile,'DATA_SOURCE');

if instrument==1 % UT-GBS
    infile{ind}=['DATA_SOURCE=UVVIS.DOAS.ZENITH.' tg '_UTORONTO001'];
elseif instrument==2 % PEARL-GBS
    infile{ind}=['DATA_SOURCE=UVVIS.DOAS.ZENITH.' tg '_UTORONTO002'];
end

% data quality (rapid delivery or standard)
ind = find_in_file(infile,'DATA_QUALITY');

if RD
    infile{ind}='DATA_QUALITY=RD';
else
    infile{ind}='DATA_QUALITY=Validated using co-located SAOZ measurements';
end
% data start and stop date
ind = find_in_file(infile,'DATA_START_DATE');

infile{ind}=['DATA_START_DATE=' fields.start];
infile{ind+1}=['DATA_STOP_DATE=' fields.stop];

% file name and generation date
ind = find_in_file(infile,'FILE_NAME');

% infile{ind}=['FILE_NAME=' fields.fname '.hdf']; % seems to be deleted and
% re-generated by NDACC code

time_now=datestr(datetime('now','TimeZone','utc'),'yyyymmddTHHMM');
time_now=[time_now,'00Z'];
infile{ind+1}=['FILE_GENERATION_DATE=' time_now];


%% modify fields referring to variables

% dimensions of each variable must be written in the metadata file!
% dimensions and variables with size 1 are hard-coded

rec_str=num2str(fields.size_rec);
grid_str=num2str(fields.size_grid);

% variables with one value per measurement
for varname={'DATETIME',...
             'DATETIME.START',...
             'DATETIME.STOP',...
             'INTEGRATION.TIME',...
             'ANGLE.SOLAR_ZENITH.ASTRONOMICAL',...
             'ANGLE.SOLAR_AZIMUTH',...
             'ANGLE.VIEW_AZIMUTH',...
             'ANGLE.VIEW_ZENITH',...
             'CLOUD.CONDITIONS',...
             [tg '.COLUMN.STRATOSPHERIC_SCATTER.SOLAR.ZENITH'],...
             [tg '.COLUMN.STRATOSPHERIC_SCATTER.SOLAR.ZENITH_UNCERTAINTY.RANDOM.STANDARD'],...
             [tg '.COLUMN.STRATOSPHERIC_SCATTER.SOLAR.ZENITH_UNCERTAINTY.SYSTEMATIC.STANDARD'],...
             [tg '.COLUMN.STRATOSPHERIC_SCATTER.SOLAR.ZENITH_APRIORI'],...
             [tg '.COLUMN.STRATOSPHERIC_SCATTER.SOLAR.ZENITH_AMF']}

    % find line where description of variable begins
    ind = find_in_file(infile,['VAR_NAME=' varname{1}]);
    
    % variable size is 4th line from var_name
    infile{ind+4}=['VAR_SIZE=' rec_str];
    
end

% altitude grid
ind = find_in_file(infile,'VAR_NAME=ALTITUDE');
infile{ind+4}=['VAR_SIZE=' grid_str ';1'];

% altitude boundaries
ind = find_in_file(infile,'VAR_NAME=ALTITUDE.BOUNDARIES');
% need to start with flipped dimesions -- see NDACC_data_submission.m
infile{ind+4}=['VAR_SIZE=2;' grid_str];

% variables on the altitude grid
for varname={'PRESSURE_INDEPENDENT',...
             'TEMPERATURE_INDEPENDENT',...
             'COLUMN.PARTIAL_INDEPENDENT',...
             [tg '.MIXING.RATIO.VOLUME_SCATTER.SOLAR.ZENITH_APRIORI'],...
             [tg '.COLUMN.STRATOSPHERIC_SCATTER.SOLAR.ZENITH_AVK'],...
             [tg '.COLUMN.PARTIAL_SCATTER.SOLAR.ZENITH_APRIORI']}

    % find line where description of variable begins
    ind = find_in_file(infile,['VAR_NAME=' varname{1}]);
    
    % variable size is 4th line from var_name
    infile{ind+4}=['VAR_SIZE=' grid_str ';' rec_str];
    
end



%% write modified input file

fname=['input_' fields.fname];
% fname='test.txt';

fid = fopen([fields.fdir fname '.txt'], 'w');
for i = 1:numel(infile)
    if infile{i+1} == -1
        fprintf(fid,'%s', infile{i});
        break
    else
        fprintf(fid,'%s\n', infile{i});
    end
end

